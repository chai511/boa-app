{"version":3,"sources":["logo.svg","Header.js","Footer.js","PropsStates/TextDisplay.js","Intercomp/ChildParentInvoke.js","PropsStates/Textinput.js","ContextApi/ContextApi.js","lifecycle/CompLifeCycle.js","Hooks/Hook5.js","PropsStates/StatefullApp.js","contextapifamily/FamilyContext.js","UsingRefs.js","Axios-example/Axios.js","Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","props","className","company","city","defaultProps","Footer","this","email","React","Component","TextDisplay","style","fontSize","color","background","text","Content","type","value","myDataProp","onChange","updateStateProp","id","name","ContentSibling","class","console","log","data","MyContext","createContext","MyProvider","state","salary","job","Provider","incrementSalary","setState","decrementSalary","children","Family","Person","Consumer","context","Fragment","onClick","myNumber","msg","document","getElementById","innerText","err","TableRow","age","surname","Relationship","Sal","Releationship","FragmentApp","title","Axios","getData","axios","get","then","response","dataloaded","Dashboard","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3639b19d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\nexport  const Header= (props) =>{\r\n    return(\r\n           <div>\r\n               <h3 className=\"bg-warning text-primary\">{props.company}</h3>      \r\n                <h5>{props.city}</h5>     \r\n            </div>\r\n  \r\n    )\r\n }\r\n Header.defaultProps={company:\"No Company\"};\r\n //\"bg-warning text-primary\"\r\n// Stateless Functional component - Presentation\r\n","import React from 'react'\r\n\r\nexport default class Footer extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h3>{this.props.email}</h3>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, {Component} from 'react'\r\nexport default class TextDisplay extends Component{\t\r\n\trender(){\r\n\t\tlet myStyle = {\r\n         fontSize: 20,\r\n\t\t color: '#FF0000',\r\n\t\t background:'yellow'\r\n      }\r\n\t\treturn\t( \t\t\t \r\n\t\t\t<div style ={myStyle}>Welcome : {this.props.text}</div>\r\n\t\t\t)\t\r\n\t\t\t\r\n\t}\r\n}\r\n\r\n\r\n","import React from 'react'\r\n\r\n//Parent component\r\nexport default class ChildParentInvoke extends React.Component{\r\n   constructor(props) {    \r\n      super(props)      \r\n      this.state = {\r\n         data: 'Initial data...'\r\n      }\r\n   };\r\n   // event handler in Parent\r\n   updateState(event) {\r\n      this.setState({data: event.target.value})   \r\n      console.log(event.target.value)  \r\n   }\r\n\r\n   \r\n   render() {\r\n      return (\r\n         <div>\r\n           <h1 className='text-success'>Parent component</h1>\r\n           <h2 className='text-danger bg-success'>\r\n           {console.log('from parent component')}\r\n                    {this.state.data} </h2>\r\n           <br/>\r\n\r\n           <h2 >Child Component</h2> <br/>            \r\n           <Content myDataProp = {this.state.data} \r\n               updateStateProp = {(event)=>this.updateState(event)}>\r\n            </Content>         \r\n            <ContentSibling data={this.state.data}></ContentSibling>\r\n         </div>\r\n      );\r\n   }\r\n}\r\n\r\n//Child Component\r\nconst Content=(props)=>{\r\n \r\n      return (\r\n         <div>           \r\n            <input type = \"text\" value = {props.myDataProp} \r\n               onChange = {props.updateStateProp} id='txt1' name=\"txt1\" />               \r\n         </div>\r\n      );\r\n   }\r\n //Another child\r\n const ContentSibling=(props)=>{\r\n    return (\r\n       <div class=\"bg-info\">\r\n         {console.log('from child component')}\r\n          <h4>{props.data}</h4>  \r\n       </div>\r\n    );\r\n }\r\n\r\n\r\n//end","import React, {Component} from 'react'\r\nimport TextDisplay from './TextDisplay'\r\n\r\nexport default class TextInput extends Component{\r\n\tconstructor(props){\r\n\t\tsuper(props)\r\n\t\tthis.state={inputText:'Murthy'}\t\t\r\n\r\n\t\t//old pratice \t\r\n\t\t//this.handleChange=this.handleChange.bind(this)\t\r\n\t}\r\n\r\n\t// Event Handler\r\n\thandleChange(event){\r\n     //this.state.inputText=event.target.value\r\n\r\n\t this.setState({\r\n\t\t\tinputText:event.target.value\r\n\t\t})\r\n\t}\t\t\t\t\r\n\t\r\n\t// lifecyle method will be autimatically invoked by react \r\n\t// called everytime whenever state changes\r\n\r\n\t// controlled component vs uncontrolled component vs html input element\r\n\trender(){\r\n\treturn\t(\r\n\t\t<div>\r\n\t\tCompany : <input type=\"text\" id=\"txt\"  />\r\n\t\t<br/><br/>\r\n\t\t<input type=\"text\" value=\"uncontrolled\"/>      \r\n\r\n\t\t\t<div>Enter Name</div>\r\n\t\t\t<input type=\"text\" \r\n\t\t\t          value={this.state.inputText}\r\n\t\t\t\t\t  onChange={(event)=>this.handleChange(event)}\r\n\t\t\t\t\t  name=\"name\"/>\r\n\t\t\t\t\t  \r\n\t\t\t{this.state.inputText \r\n\t\t\t\t ?<TextDisplay text={this.state.inputText}/>\r\n\t\t\t\t :<TextDisplay text=\"Enter name please\"/>\r\n\t\t\t}\t\t\t\t\t\t\t\r\n\t\t</div>\r\n\t\t)\t\r\n\t}\r\n}//end\r\n","import React from 'react'\r\n\r\n// 1. Create the Context with initial state \r\nconst MyContext= React.createContext();//{}\r\n//const AuthContext=React.createContext({'jwttoken':'','username':null})\r\n\r\n\r\n// 2. Create Provider component\r\nclass MyProvider extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            name:'Murthy',\r\n            salary:5000,\r\n            job:'Engineer'\r\n        }\r\n    }\r\n\r\n    \r\n    render(){\r\n        return(\r\n            <MyContext.Provider value={{\r\n                //data\r\n                state:this.state,\r\n                //Function\r\n                incrementSalary: () => this.setState({\r\n                salary: this.state.salary + 1000\r\n                }),\r\n                decrementSalary: () => this.setState({\r\n                    salary: this.state.salary - 1000\r\n                    })\r\n            }}>\r\n               {this.props.children}\r\n            </MyContext.Provider>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n//3. Wrap main app into Myprovider to access the context\r\nexport default class Context extends React.Component{    \r\n    render(){\r\n        return (\r\n            <MyProvider>\r\n            <div className=\"bg-success\">\r\n                <h2 className=\"bg-info\">React Context API Demo</h2>                               \r\n                <Family/>      \r\n            </div>\r\n            </MyProvider>\r\n        )\r\n    }\r\n}\r\n\r\nconst Family=()=>{\r\n    return(\r\n        <div>\r\n            <Person/> \r\n        </div>\r\n    )\r\n}\r\n\r\nclass Person extends React.Component{\r\n    render(){\r\n        return (\r\n            <div>\r\n                <MyContext.Consumer>\r\n                    {\r\n                        (context) => (\r\n                            <React.Fragment>\r\n                                <h3 className=\"bg-primary\">Person details</h3>\r\n                                <p>Hi! {context.state.name}</p>\r\n                                <p className=\"bg-danger\">Salary : {context.state.salary}</p>\r\n                                <p>Job : {context.state.job}</p>\r\n                                <button  className=\"btn btn-primary\"\r\n                                onClick={context.incrementSalary}>Increment Salary</button><br/>\r\n                                <button  className=\"btn btn-primary\"\r\n                                onClick={context.decrementSalary}>Decrement Salary</button>\r\n                \r\n                            </React.Fragment>\r\n                        )\r\n                    }\r\n                </MyContext.Consumer>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n/*\r\n1. Create the context (JSON object) with initial state\r\n2. configure the provider with context\r\n3. consume the context with consumer\r\n\r\n\r\n*/","import React from 'react';\r\n//import Parent from './ErrorHandlling';\r\n\r\nexport default class CompLifeCycle extends React.Component {\r\n   constructor(props) {\r\n     //1. initialization phase\r\n     console.log(\"In constructor CompLifeCycle:\"+props.myNumber);\r\n      super(props);\t\t\r\n      this.state = {\r\n         data: 0,\r\n         msg: 'Initial data...'\r\n      }          \r\n   };\r\n   // Event handler\r\n   setNewNumber(e) {\r\n      this.setState({data: this.state.data + 1})\r\n   }\r\n   updateState(e) {\r\n      this.setState({msg:e.target.value});\r\n   }      \r\n   //2. render\r\n   render() {\r\n      return (\r\n         <div>          \r\n             <button  onClick =\r\n             {(event)=>{this.setNewNumber(event)}}>\r\n                    INCREMENT</button>       \r\n\r\n             <Content myNumber = {this.state.data} msg={this.state.msg}></Content>\r\n\r\n            <br/>\r\n             <input type = \"text\" value ={this.state.msg}\r\n                           onChange = {(e)=>this.updateState(e)} />\r\n             <h3 >{this.state.msg}</h3>      \r\n         </div>\r\n      );\r\n   }\r\n}// parent component is completed\r\n\r\n// life cycle methods are only supported in Container (Stateful functional component)\r\n// you can not have life cycle methods in Presentation(SFC)\r\n// react hooks\r\n\r\n//child comp\r\nclass Content extends React.Component {\r\n  constructor(props){\r\n    // Initialize props with constructor, initialize state and register events\r\n    super(props);\r\n    this.state={name:'Murthy'} \r\n    console.log(\"In constructor Content:\"+props.myNumber); //?      \r\n    console.log(\"1. Content Constructor fired - Initialization phase\");\r\n    //this.handleScroll = this.handleScroll.bind(this); \r\n  }\r\n\r\n  static getDerivedStateFromProps(props, state){\r\n   console.log(\"4. getDerivedStateFromProps: \"+props.myNumber)\r\n   console.log(state.name)\r\n   // ajax call to REST\r\n   return {}\r\n}\r\n\r\n  componentDidMount() {\r\n   console.log('2. Component DID MOUNT! - reset data or reintialize data ')\r\n  console.log('componentDidMount => ' + this.props.myNumber);  //0\r\n  //Make ajax calls here or load some mocked data and update state\r\n   //window.addEventListener('scroll', this.handleScroll);   \r\n   // subscribe to web sockets here \r\n }\r\n\r\n//shouldComponentUpdate() will be invoked before rendering \r\n//when new props or state are being received.\r\n// This method won't be called on initial rendering. (return true by default)\r\n shouldComponentUpdate(props,state) {\r\n   console.log(\"4. Decide whether to re-render or not \")\r\n   console.log(state )\r\n   if(props.myNumber >5) {\r\n   return true\r\n }else{\r\n      return false;    \r\n     }\r\n}\r\n\r\n   \r\nrender() {   \r\n   return (       \r\n        <div>\r\n          <h3 id=\"txt1\">{this.props.myNumber}</h3> \r\n          <div id=\"txt2\">Hello {this.props.msg}!</div> \r\n         </div>             \r\n         );\r\n   }\r\n\r\n    //This method is not called for the initial rendering.\r\n   //You can perform DOM operations after an update inside this function.\r\n  // access Real DOM with Jquery here or normal javascript \r\n  componentDidUpdate() {\r\n   console.log('7.Component now updated. Manipulate REAL DOM updates')\r\n   console.log(document.getElementById(\"txt1\").innerText)\r\n   console.log(document.getElementById(\"txt2\").innerText)\r\n   }\r\n\r\n\r\n    // Error handling only available from 16.0 onwards\r\ncomponentDidCatch(err) {\r\n   // post err message to Database by invokiing rest api with Ajax\r\n   // handle this in root component for one time\r\n console.log(\"Some error has occured... log it in server \"+err)\r\n}\r\n\r\n//This is invoked immediately before a component is unmounted or removed from the DOM.\r\n  //Use this as an opportunity to perform cleanup operations.\r\n  // For example, unbind event listeners here to avoid memory leaking.\r\n  componentWillUnmount() {\r\n   // avoid memory leak - unsubscribe to web sockets\r\n     console.log('8.WILL UNMOUNT! - release the cache here ')\r\n     //window.removeEventListener('scroll', this.handleScroll);\r\n   }\r\n\r\n  //The componentWillMount() method is invoked only once before \r\n  //initial rendering.\r\n   //It is also a good place to set initial state value.\r\n  /* componentWillMount() {\r\n      // load data from cache (Local storage)\r\n       console.log('1. componentWillMount => ' +\r\n            this.props.myNumber);//?\r\n   }*/\r\n\r\n// important hook fires only once \r\n\r\n\r\n//This method will be invoked when a component is receiving \r\n   //new props. componentWillReceiveProps() \r\n   //won't be called for the initial rendering.\r\n /*  componentWillReceiveProps(nextProps) {    \r\n      console.log('3.set default props here and validate props here')\r\n      console.log(\"Props in Component will receive :\"+ \r\n      nextProps.myNumber)\r\n      // Live ajax calls you can make here for live data\r\n     //The old props can be accessed via this.props inside this. \r\n    //you can set state according to changes of props in this method.\r\n    this.setState({\r\n      isPassed: nextProps.myNumber >= 60\r\n       });\r\n    }*/\r\n     \r\n}\r\n// End of code\r\n\r\n","import React, { useRef, useEffect } from 'react'\r\n\r\nconst UseRefDemo = () => {\r\n  const counter = useRef(14)\r\n  useEffect(() => {\r\n    counter.current = counter.current + 1\r\n  }, counter)\r\n\r\n  return <h1>{`it has printed ${counter.current}`}</h1>\r\n}\r\n\r\nexport default UseRefDemo","import React from 'react';\r\nclass StatefulApp extends React.Component {\r\n   constructor(props) {\r\n      super(props);\t\t\r\n      this.state = {\r\n         data: \r\n         [\r\n            {\r\n               \"id\":1,\r\n               \"name\":\"Murthy\",\r\n               \"age\":\"46\"\r\n            },\r\n\t\t\t\t\r\n            {\r\n               \"id\":2,\r\n               \"name\":\"Kavitha\",\r\n               \"age\":\"30\"\r\n            },\r\n\t\t\t\t\r\n            {\r\n               \"id\":3,\r\n               \"name\":\"Kiran\",\r\n               \"age\":\"40\"\r\n            }\r\n         ]\r\n      }\r\n   }\r\n\trender() {\r\n      return (\r\n         <div>\r\n            \r\n           <h3 className=\"bg-danger\">Customers of our Bank</h3>\r\n            <table  \r\n            className='table table-hover table-striped'>\r\n               <tbody>\r\n                  {this.state.data.map((person, index) =>\r\n                      <TableRow key = {index} data = {person} />)\r\n                  }\r\n               </tbody>\r\n            </table>                              \r\n            </div>\r\n      );\r\n   }\r\n}\r\n\r\nconst TableRow=(props)=> {\r\n    return (       \r\n         <tr>\r\n            <td >{props.data.id}</td>\r\n            <td>{props.data.name}</td>\r\n            <td>{props.data.age}</td>\r\n         </tr>         \r\n      );\r\n   }\r\nexport default StatefulApp;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react'\r\n\r\n// 1. Create the Context with initial state \r\nconst MyContext= React.createContext();//{}\r\n//const AuthContext=React.createContext({'jwttoken':'','username':null})\r\n\r\n// 2. Create Provider component\r\nclass MyProvider extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            surname:'Burra',\r\n        }\r\n    }\r\n\r\n    \r\n    render(){\r\n        return(\r\n            <MyContext.Provider value={{\r\n                //data\r\n                state:this.state                \r\n            }}>\r\n               {this.props.children}\r\n            </MyContext.Provider>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n//3. Wrap main app into Myprovider to access the context\r\nexport default class FamilyContext extends React.Component{    \r\n    render(){\r\n        return (\r\n            <MyProvider>\r\n            <div className=\"bg-success\">\r\n                <h2 className=\"bg-info\">React Context API Demo</h2>                               \r\n                <Family name=\"Chaithanya\" Relationship=\"Owner\" Sal=\"1000000\"/>      \r\n                <Family name=\"Srivalli\" Relationship=\"Wife\" Sal=\"100000\"/>  \r\n                <Family name=\"Maanvi\" Relationship=\"Daughter\" Sal=\"100\"/>  \r\n            </div>\r\n            </MyProvider>\r\n        )\r\n    }\r\n}\r\n\r\nconst Family=(props)=>{\r\n    return(\r\n        <div>\r\n            <Person name={props.name} Relationship={props.Relationship} Sal={props.Sal}/> \r\n        </div>\r\n    )\r\n}\r\n\r\nclass Person extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            name:props.name,\r\n            Releationship:props.Relationship,\r\n            Sal:props.Sal\r\n        }\r\n    }\r\n    render(){\r\n        return (\r\n            <div>\r\n                <MyContext.Consumer>\r\n                    {\r\n                        (context) => (\r\n                            <React.Fragment>\r\n                                <h3 className=\"bg-primary\">Person details</h3>\r\n                                <p>Hi! {context.state.surname} {this.state.name} </p>\r\n                                <h3 className=\"bg-primary\">Person Relation</h3>\r\n                                <p>{this.state.Releationship}</p>\r\n                                <p className=\"bg-danger\">Salary : {this.state.Sal}</p>\r\n                            </React.Fragment>\r\n                        )\r\n                    }\r\n                </MyContext.Consumer>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n/*\r\n1. Create the context (JSON object) with initial state\r\n2. configure the provider with context\r\n3. consume the context with consumer\r\n\r\n\r\n*/","import React ,{Fragment} from 'react';\r\nclass UsingRefs extends React.Component {\r\n   constructor(props) {\r\n      super(props);\t\t\r\n      // props.x=\"hello\"  not allowed as props are immutable      \r\n      this.state = {\r\n         data: 'React'\r\n      }      \r\n      //this.state.data=\"welcome\"  // does not re-render so bad practise\r\n   };\r\n\r\n   updateState(e) {\r\n      this.setState({data: e.target.value})\r\n   }\r\n\r\n   clearInput() {      \r\n      alert(this.refs.myInput.value) // document.getElementByName(myinput)\r\n      this.setState({data: ''});\r\n      this.refs.myInput.focus()  \r\n   }\r\n\r\n   render() {\r\n      return (\r\n        <React.Fragment>\r\n            Name :<input value = {this.state.data} \r\n                onChange = {(e)=>this.updateState(e)} \r\n                ref = \"myInput\" id=\"txt1\" />\r\n           <br/>\r\n           Password:<input type=\"password\" ref=\"pwd\"/>\r\n\r\n            <button onClick = {()=>this.clearInput()}>CLEAR</button>\r\n            <h4>{this.state.data}</h4> \r\n            \r\n            <FragmentApp title=\"Learning Fragment\"/>\r\n            </React.Fragment>\r\n      );\r\n   }\r\n}\r\n\r\n\r\n\r\nconst FragmentApp= (props) => ( \r\n  <Fragment>\r\n     <p>I am Paragraph 1</p>\r\n     <p>I am Paragraph 2</p>\r\n     <h1>{props.title}</h1>\r\n     </Fragment>\r\n )\r\n\r\n\r\n\r\n//export const Button =(props)=>(<button>{props.text}</button>)\r\n//<Button text=\"submit\">\r\n\r\n// Another way\r\nexport default  class MyComponent extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.inputRef = React.createRef();\r\n  }\r\n  render() {\r\n    return <input type=\"text\" ref={this.inputRef} />;\r\n     }\r\n  \r\n     componentDidMount() {\r\n    this.inputRef.current.focus();\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n/*\r\n// Ref in Stateless functional component\r\nconst AddColorForm = ({onNewColor=f=>f}) => {\r\nlet _title, _color\r\nconst submit = e => {\r\ne.preventDefault()\r\nonNewColor(_title.value, _color.value)\r\n_title.value = ''\r\n_color.value = '#000000'\r\n_title.focus()\r\n}\r\nreturn (\r\n<form onSubmit={submit}>\r\n<input ref={input => _title = input}\r\ntype=\"text\"\r\nplaceholder=\"color title...\" required/>\r\n<input ref={input => _color = input}\r\ntype=\"color\" required/>\r\n<button>ADD</button>\r\n</form>\r\n)\r\n}\r\n\r\n*/\r\n\r\n\r\n\r\n\r\n/*\r\nclass App extends React.Component{ \r\n   componentDidMount() {\r\n       this.nameInput.focus() }\r\n        render() { \r\n           return ( <div> \r\n            <input \r\n            defaultValue={'Won\\'t focus'} />\r\n          <input ref=\r\n          {(input) => this.nameInput = input} \r\n          defaultValue={'Will focus'} /> </div> ) } } \r\n\r\nReactDOM.render(<App />, document.getElementById('app'))\r\n\r\n*/","import React from 'react';\r\nimport axios from 'axios';\r\n\r\n\r\nexport default class Axios extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            data:[],\r\n            dataloaded:false\r\n        }\r\n    }\r\n\r\ngetData=async(props)=>{\r\n    try{\r\n        console.log('in axios')\r\n        await axios.get('http://127.0.0.1:3000')\r\n        .then(response=>response)\r\n        .then(data=> {if(!this.state.dataloaded){console.log(data);this.setState({dataloaded:true,data:data['data']})}\r\n                     else{}})\r\n        console.log(this.state.data)\r\n\r\n    }\r\n    catch(err)\r\n    {\r\n        console.log(err)\r\n    }\r\n}\r\n\r\n\r\nrender(){\r\n    {if(!this.state.dataloaded){this.getData()}}\r\n    return(<div>\r\n           <h1>{this.state.data}</h1> </div>)\r\n}\r\n}\r\n\r\n","import React, { Component } from 'react'\r\nimport TextInput from './PropsStates/Textinput'\r\nimport ChildParentInvoke from './Intercomp/ChildParentInvoke'\r\nimport Context from './ContextApi/ContextApi'\r\nimport Button from './Hooks/Hook2'\r\nimport DataLoader from './Hooks/Hook4'\r\nimport UseRefDemo from './Hooks/Hook5'\r\nimport CompLifeCycle from './lifecycle/CompLifeCycle'\r\nimport StatefulApp from './PropsStates/StatefullApp'\r\nimport FamilyContext from './contextapifamily/FamilyContext'\r\nimport MyComponent from './UsingRefs'\r\nimport Axios from './Axios-example/Axios'\r\n\r\nexport default class Dashboard extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state={'name':'Chai'}\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n              <Axios/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Header } from './Header';\nimport Footer from './Footer';\nimport Dashboard from './Dashboard';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <Header company=\"Global Village\" city=\"Hyderabad\"/>\n      <Dashboard/>\n     <Footer email=\"All rights reserved by @Chai\"/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}